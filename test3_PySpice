import matplotlib.pyplot as plt
import numpy as np

import PySpice.Logging.Logging as Logging
logger = Logging.setup_logging()

#####################################

from PySpice.Plot.BodeDiagram import bode_diagram
from PySpice.Probe.Plot import plot

#####################################

from PySpice.Spice.Netlist import Circuit, SubCircuitFactory
from PySpice.Unit import *

#####################################

transPath = {
    "2N2222A" : "library/2N2222A.lib",
    "ZTX107-NOM" : "library/ZTX107-NOM.lib"
}

currModel = '2N2222A'

#####################################

class BasicAmp(SubCircuitFactory):
    NAME = 'BasicAmp'
    NODES = ('in', 'out')
    def __init__(self,):
        super().__init__()
        self.V('power', 5, circuit.gnd, 15@u_V)
        self.C(1, 'in', 2, 10@u_uF)
        self.R(1, 5, 2, 100@u_kΩ)
        self.R(2, 2, circuit.gnd, 20@u_kΩ)
        self.R('C', 5, 4, 10@u_kΩ)
        self.BJT(1, 4, 2, 3, model=currModel) # Q is mapped to BJT !
        self.R('E', 3, circuit.gnd, 2@u_kΩ)
        self.C(2, 4, 'out', 10@u_uF)

circuit = Circuit('amp')

circuit.SinusoidalVoltageSource('input', 'in', circuit.gnd, amplitude=0.5@u_V)

circuit.include(transPath[currModel])
circuit.subcircuit(BasicAmp())
circuit.X('amp',"BasicAmp",'in','out')
circuit.R('Load', 'out',circuit.gnd, 1@u_MΩ)

simulator = circuit.simulator(temperature=25, nominal_temperature=25)
analysis = simulator.ac(start_frequency=1@u_Hz, stop_frequency=100@u_MHz, number_of_points=5,  variation='dec')

figure, (ax1, ax2) = plt.subplots(2, figsize=(20, 10))

plt.title("Bode Diagram of an Operational Amplifier")
bode_diagram(axes=(ax1, ax2),
             frequency=analysis.frequency,
             gain=20*np.log10(np.absolute(analysis.out)),
             phase=np.angle(analysis.out, deg=False),
             marker='.',
             color='blue',
             linestyle='-',
            )
plt.tight_layout()
plt.show()
# figure, ax = plt.subplots(figsize=(20, 10))

# # .ac dec 5 10m 1G

# simulator = circuit.simulator(temperature=25, nominal_temperature=25)
# analysis = simulator.transient(step_time=source.period/200, end_time=source.period*2)

# ax.set_title('')
# ax.set_xlabel('Time [s]')
# ax.set_ylabel('Voltage [V]')
# ax.grid()
# ax.plot(analysis['in'])
# ax.plot(analysis.out)
# ax.legend(('input', 'output'), loc=(.05,.1))

# plt.tight_layout()
# plt.show()